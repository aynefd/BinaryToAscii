(0000) 3000  0011000000000000 (   1)                 .ORIG x3000
(3000) 5020  0101000000100000 (   2)                 AND   R0 R0 #0
(3001) 5260  0101001001100000 (   3)                 AND   R1 R1 #0
(3002) 54A0  0101010010100000 (   4)                 AND   R2 R2 #0
(3003) 56E0  0101011011100000 (   5)                 AND   R3 R3 #0
(3004) 5920  0101100100100000 (   6)                 AND   R4 R4 #0
(3005) 5B60  0101101101100000 (   7)                 AND   R5 R5 #0
(3006) 5DA0  0101110110100000 (   8)                 AND   R6 R6 #0
(3007) 5FE0  0101111111100000 (   9)                 AND   R7 R7 #0
(3008) 2408  0010010000001000 (  12)                 LD    R2 MyNum
(3009) 2608  0010011000001000 (  13)                 LD    R3 MyNumB
(300A) 0E12  0000111000010010 (  14)                 BRNZP DIVISION
(300B) 4819  0100100000011001 (  15) OUTPUT          JSR   BinarytoASCII
(300C) 2042  0010000001000010 (  16)                 LD    R0 NewlineChar
(300D) F021  1111000000100001 (  17)                 TRAP  x21
(300E) E035  1110000000110101 (  18)                 LEA   R0 ASCIIBUFF
(300F) F022  1111000000100010 (  19)                 TRAP  x22
(3010) F025  1111000000100101 (  21)                 TRAP  x25
(3011) 000A  0000000000001010 (  27) MyNum           .FILL x000A
(3012) 0005  0000000000000101 (  28) MyNumB          .FILL x0005
(3013) 1083  0001000010000011 (  33) ADDITION        ADD   R0 R2 R3
(3014) 0FF6  0000111111110110 (  34)                 BRNZP OUTPUT
(3015) 96FF  1001011011111111 (  36) SUBTRACTION     NOT   R3 R3
(3016) 16E1  0001011011100001 (  37)                 ADD   R3 R3 #1
(3017) 1083  0001000010000011 (  38)                 ADD   R0 R2 R3
(3018) 0FF2  0000111111110010 (  39)                 BRNZP OUTPUT
(3019) 1002  0001000000000010 (  42) MULT            ADD   R0 R0 R2
(301A) 16FF  0001011011111111 (  43)                 ADD   R3 R3 #-1
(301B) 03FD  0000001111111101 (  44)                 BRP   MULT
(301C) 0FEE  0000111111101110 (  45)                 BRNZP OUTPUT
(301D) 1DA0  0001110110100000 (  48) DIVISION        ADD   R6 R6 #0
(301E) 96FF  1001011011111111 (  49)                 NOT   R3 R3
(301F) 16E1  0001011011100001 (  50)                 ADD   R3 R3 #1
(3020) 1DA1  0001110110100001 (  51) DivLoop         ADD   R6 R6 #1
(3021) 1483  0001010010000011 (  52)                 ADD   R2 R2 R3
(3022) 03FD  0000001111111101 (  53)                 BRP   DivLoop
(3023) 11A0  0001000110100000 (  54)                 ADD   R0 R6 #0
(3024) 0FE6  0000111111100110 (  55)                 BRNZP OUTPUT
(3025) E21E  1110001000011110 (  67) BinarytoASCII   LEA   R1 ASCIIBUFF
(3026) 1020  0001000000100000 (  68)                 ADD   R0 R0 #0
(3027) 0803  0000100000000011 (  69)                 BRN   NegSign
(3028) 2420  0010010000100000 (  70)                 LD    R2 ASCIIplus
(3029) 7440  0111010001000000 (  71)                 STR   R2 R1 #0
(302A) 0E04  0000111000000100 (  72)                 BRNZP Begin100
(302B) 241E  0010010000011110 (  73) NegSign         LD    R2 ASCIIminus
(302C) 7440  0111010001000000 (  74)                 STR   R2 R1 #0
(302D) 903F  1001000000111111 (  75)                 NOT   R0 R0
(302E) 1021  0001000000100001 (  76)                 ADD   R0 R0 #1
(302F) 241B  0010010000011011 (  78) Begin100        LD    R2 ASCIIoffset
(3030) 261B  0010011000011011 (  80)                 LD    R3 Neg100
(3031) 1003  0001000000000011 (  81) Loop100         ADD   R0 R0 R3
(3032) 0802  0000100000000010 (  82)                 BRN   End100
(3033) 14A1  0001010010100001 (  83)                 ADD   R2 R2 #1
(3034) 0FFC  0000111111111100 (  84)                 BRNZP Loop100
(3035) 7441  0111010001000001 (  86) End100          STR   R2 R1 #1
(3036) 2616  0010011000010110 (  87)                 LD    R3 Pos100
(3037) 1003  0001000000000011 (  88)                 ADD   R0 R0 R3
(3038) 2412  0010010000010010 (  90)                 LD    R2 ASCIIoffset
(3039) 2614  0010011000010100 (  92) Begin10         LD    R3 Neg10
(303A) 1003  0001000000000011 (  93) Loop10          ADD   R0 R0 R3
(303B) 0802  0000100000000010 (  94)                 BRN   End10
(303C) 14A1  0001010010100001 (  95)                 ADD   R2 R2 #1
(303D) 0FFC  0000111111111100 (  96)                 BRNZP Loop10
(303E) 7442  0111010001000010 (  98) End10           STR   R2 R1 #2
(303F) 102A  0001000000101010 (  99)                 ADD   R0 R0 #10
(3040) 240A  0010010000001010 ( 100) Begin1          LD    R2 ASCIIoffset
(3041) 1480  0001010010000000 ( 101)                 ADD   R2 R2 R0
(3042) 7443  0111010001000011 ( 102)                 STR   R2 R1 #3
(3043) C1C0  1100000111000000 ( 103)                 RET   
(3044) 0000  0000000000000000 ( 107) ASCIIBUFF       .FILL x0000
(3045) 0000  0000000000000000 ( 107)                 .FILL x0000
(3046) 0000  0000000000000000 ( 107)                 .FILL x0000
(3047) 0000  0000000000000000 ( 107)                 .FILL x0000
(3048) 0000  0000000000000000 ( 107)                 .FILL x0000
(3049) 002B  0000000000101011 ( 107) ASCIIplus       .FILL x002B
(304A) 002D  0000000000101101 ( 108) ASCIIminus      .FILL x002D
(304B) 0030  0000000000110000 ( 109) ASCIIoffset     .FILL x0030
(304C) FF9C  1111111110011100 ( 110) Neg100          .FILL xFF9C
(304D) 0064  0000000001100100 ( 111) Pos100          .FILL x0064
(304E) FFF6  1111111111110110 ( 112) Neg10           .FILL xFFF6
(304F) 000A  0000000000001010 ( 113) NewlineChar     .FILL x000A
